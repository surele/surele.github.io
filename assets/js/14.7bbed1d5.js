(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{371:function(e,n,t){"use strict";t.r(n);var a=t(45),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"vue-组件开发以及-npm-发包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-组件开发以及-npm-发包"}},[e._v("#")]),e._v(" vue 组件开发以及 npm 发包")]),e._v(" "),t("h2",{attrs:{id:"_1、vue-组件开发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、vue-组件开发"}},[e._v("#")]),e._v(" 1、vue 组件开发")]),e._v(" "),t("h2",{attrs:{id:"_2、npm-发包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、npm-发包"}},[e._v("#")]),e._v(" 2、npm 发包")]),e._v(" "),t("h3",{attrs:{id:"什么是-npm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-npm"}},[e._v("#")]),e._v(" 什么是 npm?")]),e._v(" "),t("p",[e._v("npm 其实是 Node.js 的包管理工具（package manager）。")]),e._v(" "),t("p",[e._v("为啥我们需要一个包管理工具呢？因为我们在 Node.js 上开发时，会用到很多别人写的 JavaScript 代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家都把自己开发的模块打包后放到 npm 官网上，如果要使用，直接通过 npm 安装就可以直接用，不用管代码存在哪，应该从哪下载。")]),e._v(" "),t("p",[e._v("更重要的是，如果我们要使用模块 A，而模块 A 又依赖于模块 B，模块 B 又依赖于模块 X 和模块 Y，npm 可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。")]),e._v(" "),t("p",[e._v("讲了这么多，npm 究竟在哪？")]),e._v(" "),t("p",[e._v("其实 npm 已经在 Node.js 安装的时候顺带装好了。")]),e._v(" "),t("h3",{attrs:{id:"准备工作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[e._v("#")]),e._v(" 准备工作：")]),e._v(" "),t("p",[e._v("注册 npm 账号："),t("a",{attrs:{href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网地址"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("在终端执行：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm addUser\n")])])]),t("p",[e._v("或者执行：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm login\n")])])]),t("h3",{attrs:{id:"npm-init-生成-package-json-说明书文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#npm-init-生成-package-json-说明书文件"}},[e._v("#")]),e._v(" npm init (生成 package.json 说明书文件)")]),e._v(" "),t("p",[e._v("cd 进项目所在的文件夹，执行")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm init\n")])])]),t("p",[e._v("可以使用"),t("code",[e._v("npm init -y")]),e._v("跳过向导，快速生成")]),e._v(" "),t("p",[e._v("接下来就是一长串表单：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("name：填写你这个包的名字，默认是你这个文件夹的名字。不过这里要着重说一下，最好先去 npm 上找一下有没有同名的包。最好的测试方式就是，在命令行里面输入"),t("code",[e._v("npm install 你要取的名字")]),e._v("，如果报错，那么很好，npm 上没有跟你同名的包，你可以放心大胆地把包发布出去。如果成功下载下来了。。。那么很不幸，改名字吧。。。")])]),e._v(" "),t("li",[t("p",[e._v("version：你这个包的版本，默认是 1.0.0")])]),e._v(" "),t("li",[t("p",[e._v("description：这个用一句话描述你的包是干嘛用的，比如我就直接：‘a plugin for express.register routes base on file path’")])]),e._v(" "),t("li",[t("p",[e._v("entry point：入口文件，默认是"),t("code",[e._v("index.js")]),e._v("，你也可以自己填写你自己的文件名")])]),e._v(" "),t("li",[t("p",[e._v("test command：测试命令，这个直接回车就好了，因为目前还不需要这个。")])]),e._v(" "),t("li",[t("p",[e._v("git repository：这个是 git 仓库地址，如果你的包是先放到 github 上或者其他 git 仓库里，这时候你的文件夹里面会存在一个隐藏的"),t("code",[e._v(".git")]),e._v("目录，npm 会读到这个目录作为这一项的默认值。如果没有的话，直接回车继续。")])]),e._v(" "),t("li",[t("p",[e._v("keyword：这个是一个重点，这个关系到有多少人会搜到你的 npm 包。尽量使用贴切的关键字作为这个包的索引。我这个包嘛，第一是在"),t("code",[e._v("express")]),e._v("下工作的，然后又是一个插件"),t("code",[e._v("plugin")]),e._v("，然后又是一个注册路由"),t("code",[e._v("route")]),e._v("用的，而这个路由又是基于文件目录"),t("code",[e._v("dir")]),e._v("，所以很好就得出我的包的索引关键字。")])]),e._v(" "),t("li",[t("p",[e._v("author：写你的账号或者你的 github 账号吧")])]),e._v(" "),t("li",[t("p",[e._v("license：这个直接回车，开源文件来着。。")])])]),e._v(" "),t("p",[t("strong",[e._v("version 版本")])]),e._v(" "),t("p",[e._v("规则：对于"),t("code",[e._v('"version":"x.y.z"')])]),e._v(" "),t("ul",[t("li",[e._v("1:【major 主要更新】有很大的改动，无法向后兼容,增加 "),t("code",[e._v("x")])]),e._v(" "),t("li",[e._v("2.【minor 次要更新】增加了新特性，但仍能向后兼容，增加 "),t("code",[e._v("y")])]),e._v(" "),t("li",[e._v("3.【patch 补丁】修复 bug,小改动，增加 "),t("code",[e._v("z")])]),e._v(" "),t("li",[e._v("4.【prerelease 预览版】\neg.")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"2.3.4-alpha.3" =="major.minor.patch-prerelease"\n')])])]),t("p",[e._v("在当前目录下使用"),t("code",[e._v("npm publish")])]),e._v(" "),t("p",[e._v("注意发布前确认是否已经登陆\n可以用 "),t("code",[e._v("npm who am i")]),e._v("检查登陆状态")]),e._v(" "),t("p",[e._v("要是用淘宝镜像的，需要切换回来：\nnpm config set registry http://registry.npmjs.org")]),e._v(" "),t("p",[t("code",[e._v("npm install 你发布出去的包的名字")]),e._v(" 尝试下载安装发布的包\n一般发布成功后会受到发布成功的邮件提醒")]),e._v(" "),t("p",[e._v("问题场景：npm publish 发布一个 npm 包，发布的时候你希望只发布打包的文件，包的源码，单元测试等文件不希望发布；\n.npmignore 中的文件不会被发布，默认情况下，npm publish 发布目录中的所有文件，除了")]),e._v(" "),t("p",[e._v("._.swp\n.__\n.DS_Store\n.git\n.hg\n.npmrc\n.lock-wscript\n.svn\n.wafpickle-*\nconfig.gypi\nCVS\nnpm-debug.log\n所以不需要把这些文件加入到.npmignore 中也会忽略，如果没有.npmignore,有.gitignore，那么.gitignore 中的文件会从包中忽略，如果同时存在，那么.npmignore 的优先级更好")]),e._v(" "),t("p",[e._v("这些是默认发布的文件，加入.gitignore 和.npmignore 都是不会生效的：")]),e._v(" "),t("p",[e._v("package.json\nREADME(and its variants)\nCHANGELOG(and its variants)\nLICENSE/LICENCE")]),e._v(" "),t("p",[e._v("注意的坑\n无法发布到私有包")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm ERR! publish Failed PUT 402\nnpm ERR! code E402\nnpm ERR! You must sign up for private packages :\n")])])]),t("p",[e._v("这个当你的包名为@your-name/your-package 时才会出现，原因是当包名以@your-name 开头时，npm publish 会默认发布为私有包，但是 npm 的私有包需要付费，所以需要添加如下参数进行发布:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm publish --access public\n")])])]),t("h1",{attrs:{id:"参考文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[e._v("#")]),e._v(" 参考文章")]),e._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/36d3e0e00157",target:"_blank",rel:"noopener noreferrer"}},[e._v("手把手教你用 npm 发布一个包"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/juzipidemimi/article/details/103198486",target:"_blank",rel:"noopener noreferrer"}},[e._v("看在上帝的份上，不要使用 .npmignore"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000020841543?utm_source=tag-newest",target:"_blank",rel:"noopener noreferrer"}},[e._v(".npmignore、.gitignore 和 package.json 中的 files 字段"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/zhangjing1019/article/details/102896421",target:"_blank",rel:"noopener noreferrer"}},[e._v("发布 npm 包时遇到的一些坑"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.jianshu.com/p/d616d3bf391f",target:"_blank",rel:"noopener noreferrer"}},[e._v("如何让你的npm项目自动更新版本号"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=r.exports}}]);